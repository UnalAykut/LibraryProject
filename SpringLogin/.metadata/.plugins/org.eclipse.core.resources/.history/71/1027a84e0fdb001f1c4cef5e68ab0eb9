package com.project.login.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.project.login.dto.UpdateUserRequestDto;
import com.project.login.dto.UserDto;
import com.project.login.service.AdminService;
import com.project.login.service.UserService;

@RestController
@RequestMapping("/admin")
@PreAuthorize("hasRole('ADMIN')")
public class AdminUserController {

    private final UserService userService;
    private final AdminService adminService;
    public AdminUserController(UserService userService,AdminService adminService) {
        this.userService = userService;
        this.adminService=adminService;
    }

    // Tüm kullanıcıları listele
    @GetMapping("/users")
    public ResponseEntity<List<UserDto>> getAllUsers() {
        List<UserDto> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }
    
    // Belirli bir kullanıcıyı getir
    @GetMapping("/user/{id}")
    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
        UserDto user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    }
    
    // Kullanıcıyı sil
    @DeleteMapping("/user/{id}")
    public ResponseEntity<Void> deleteUserById(@PathVariable Long id) {
        userService.deleteUserById(id);
        return ResponseEntity.noContent().build();
    }
    
    @PutMapping("/user/{id}")
    public ResponseEntity<UserDto> updateUserByAdmin(@PathVariable Long id,@RequestBody UpdateUserRequestDto updateUserRequestDto){
    	UserDto updatedUser =adminService.updateUser(id,updateUserRequestDto);
    	return ResponseEntity.ok(updatedUser); 
    }
    
}

